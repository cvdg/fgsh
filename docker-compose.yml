services:

  traefik:
    image: "traefik"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Enable a dns challenge named "cfresolver"
      - "--certificatesresolvers.cfresolver.acme.dnschallenge=true"
      # Tell which provider to use
      - "--certificatesresolvers.cfresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cfresolver.acme.dnschallenge.delayBeforeCheck=30"
      # Uncomment to use test server, after everthing ok remove file acme.json and comment again
      # - "--certificatesresolvers.cfresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # The email to provide to let's encrypt
      - "--certificatesresolvers.cfresolver.acme.email=cees.van.de.griend@griend.eu"
      # Tell to store the certificate on a path under our volume
      - "--certificatesresolvers.cfresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.cfresolver.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    # expose the predefined secret to the container by name
    secrets:
      - cf_dns_api_token
    # expose the path to file provided by docker containing the value we want for ENDPOINT.
    environment:
      CF_DNS_API_TOKEN_FILE: /run/secrets/cf_dns_api_token
    volumes:
      # Create a letsencrypt dir within the folder where the docker-compose file is
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
        #networks: 
        #- traefik_public
    labels:
      traefik.enable: true
      traefik.http.routers.api.entryPoints: "traefik"
      traefik.http.routers.api.rule: "PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
      traefik.http.routers.api.service: "api@internal"
      traefik.http.routers.api.middlewares: "api-auth"
      traefik.http.middlewares.api-auth.basicauth.users: "test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/" # test:test

  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      traefik.enable: "true"
      traefik.http.routers.whoami.rule: "Host(`whoami.griend.dev`)"
      traefik.http.routers.whoami.entrypoints: "websecure"
      # Uses the Host rule to define which certificate to issue
      traefik.http.routers.whoami.tls.certresolver: "cfresolver"
        #    networks: 
        #- traefik_public

        #networks:
        #traefik_public:
        #ipam:
        #config:
        #- subnet: "192.168.128.0/24"

secrets:
  # secret name also used to name the file exposed within the container
  cf_dns_api_token:
    # path on the host ( $ echo xxxxx > ./secrets/cf_api_key.secret)
    file: ./secrets/cf_dns_api_token.secret
